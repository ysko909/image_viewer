# image_viewer/docker-compose.yml

services:
  # 'web' という名前のサービスを定義 (名前は任意ですが、一般的にWebアプリに使われます)
  web:
    # Dockerイメージのビルド設定
    build:
      context: . # Dockerfile があるディレクトリ (カレントディレクトリ)
      dockerfile: Dockerfile # 使用するDockerfileの名前 (省略可能、デフォルトでDockerfile)
    # ポートマッピング: <ホストOSのポート>:<コンテナのポート>
    # ホストOSの 5001 番ポートへのアクセスを、コンテナの 5000 番ポートに転送します。
    # ホストOSの 5001 番が使用中の場合は、空いている別のポート (例: 8000) に変更してください。
    ports:
      - "5001:5000"
    # ボリュームマウント: <ホストOSのパス>:<コンテナのパス>
    volumes:
      # ローカルのソースコード全体をコンテナの /app ディレクトリにマウントします。
      # これにより、ローカルでファイルを編集すると、コンテナを再ビルドせずに即座に反映されます (ホットリロード)。
      - ./:/home/app
      # 'image_data' という名前付きボリュームをコンテナの /app/static/img ディレクトリにマウントします。
      # これにより、コンテナを停止・削除しても、アップロードした画像データが永続化されます。
      - image_data:/home/app/static/img
    # 環境変数: コンテナ内で使用する環境変数を設定します。
    environment:
      # Flask アプリケーションのメインファイル (app.py を想定)
      - FLASK_APP=app.py
      # Flask をデバッグモードで実行します (コード変更時の自動リロード、デバッガー有効化)。
      # Flask 2.3以降推奨。Flask 2.2以前は FLASK_ENV=development
      - FLASK_DEBUG=1
    # 必要に応じて他の環境変数 (データベース接続情報など) をここに追加できます。
    # - DATABASE_URL=...

    # ★★★ 追加 ★★★
    # 擬似TTYを割り当てます。これにより、コンテナ内でインタラクティブな操作 (例: pdbデバッガ) が可能になります。
    tty: true

# 名前付きボリュームの定義
volumes:
  # 'image_data' ボリュームを定義します。Dockerが管理する永続化領域です。
  image_data: